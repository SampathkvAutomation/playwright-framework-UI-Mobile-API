# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Editing >> should remove the item if an empty text string was entered
- Location: C:\Users\kvsam\playwright-framework-UI-Mobile-API\tests-examples\demo-todo-app.spec.ts:238:7

# Error details

```
Error: locator.fill: Target page, context or browser has been closed
Call log:
  - waiting for getByPlaceholder('What needs to be done?')

    at createDefaultTodos (C:\Users\kvsam\playwright-framework-UI-Mobile-API\tests-examples\demo-todo-app.spec.ts:416:19)
    at C:\Users\kvsam\playwright-framework-UI-Mobile-API\tests-examples\demo-todo-app.spec.ts:196:11
```

# Test source

```ts
  316 |     const firstTodoCheck = todoItems.nth(0).getByRole('checkbox');
  317 |     await firstTodoCheck.check();
  318 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);
  319 |     await expect(firstTodoCheck).toBeChecked();
  320 |     await expect(todoItems).toHaveClass(['completed', '']);
  321 |
  322 |     // Ensure there is 1 completed item.
  323 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  324 |
  325 |     // Now reload.
  326 |     await page.reload();
  327 |     await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);
  328 |     await expect(firstTodoCheck).toBeChecked();
  329 |     await expect(todoItems).toHaveClass(['completed', '']);
  330 |   });
  331 | });
  332 |
  333 | test.describe('Routing', () => {
  334 |   test.beforeEach(async ({ page }) => {
  335 |     await createDefaultTodos(page);
  336 |     // make sure the app had a chance to save updated todos in storage
  337 |     // before navigating to a new view, otherwise the items can get lost :(
  338 |     // in some frameworks like Durandal
  339 |     await checkTodosInLocalStorage(page, TODO_ITEMS[0]);
  340 |   });
  341 |
  342 |   test('should allow me to display active items', async ({ page }) => {
  343 |     const todoItem = page.getByTestId('todo-item');
  344 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  345 |
  346 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  347 |     await page.getByRole('link', { name: 'Active' }).click();
  348 |     await expect(todoItem).toHaveCount(2);
  349 |     await expect(todoItem).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);
  350 |   });
  351 |
  352 |   test('should respect the back button', async ({ page }) => {
  353 |     const todoItem = page.getByTestId('todo-item'); 
  354 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  355 |
  356 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  357 |
  358 |     await test.step('Showing all items', async () => {
  359 |       await page.getByRole('link', { name: 'All' }).click();
  360 |       await expect(todoItem).toHaveCount(3);
  361 |     });
  362 |
  363 |     await test.step('Showing active items', async () => {
  364 |       await page.getByRole('link', { name: 'Active' }).click();
  365 |     });
  366 |
  367 |     await test.step('Showing completed items', async () => {
  368 |       await page.getByRole('link', { name: 'Completed' }).click();
  369 |     });
  370 |
  371 |     await expect(todoItem).toHaveCount(1);
  372 |     await page.goBack();
  373 |     await expect(todoItem).toHaveCount(2);
  374 |     await page.goBack();
  375 |     await expect(todoItem).toHaveCount(3);
  376 |   });
  377 |
  378 |   test('should allow me to display completed items', async ({ page }) => {
  379 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  380 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  381 |     await page.getByRole('link', { name: 'Completed' }).click();
  382 |     await expect(page.getByTestId('todo-item')).toHaveCount(1);
  383 |   });
  384 |
  385 |   test('should allow me to display all items', async ({ page }) => {
  386 |     await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();
  387 |     await checkNumberOfCompletedTodosInLocalStorage(page, 1);
  388 |     await page.getByRole('link', { name: 'Active' }).click();
  389 |     await page.getByRole('link', { name: 'Completed' }).click();
  390 |     await page.getByRole('link', { name: 'All' }).click();
  391 |     await expect(page.getByTestId('todo-item')).toHaveCount(3);
  392 |   });
  393 |
  394 |   test('should highlight the currently applied filter', async ({ page }) => {
  395 |     await expect(page.getByRole('link', { name: 'All' })).toHaveClass('selected');
  396 |     
  397 |     //create locators for active and completed links
  398 |     const activeLink = page.getByRole('link', { name: 'Active' });
  399 |     const completedLink = page.getByRole('link', { name: 'Completed' });
  400 |     await activeLink.click();
  401 |
  402 |     // Page change - active items.
  403 |     await expect(activeLink).toHaveClass('selected');
  404 |     await completedLink.click();
  405 |
  406 |     // Page change - completed items.
  407 |     await expect(completedLink).toHaveClass('selected');
  408 |   });
  409 | });
  410 |
  411 | async function createDefaultTodos(page: Page) {
  412 |   // create a new todo locator
  413 |   const newTodo = page.getByPlaceholder('What needs to be done?');
  414 |
  415 |   for (const item of TODO_ITEMS) {
> 416 |     await newTodo.fill(item);
      |                   ^ Error: locator.fill: Target page, context or browser has been closed
  417 |     await newTodo.press('Enter');
  418 |   }
  419 | }
  420 |
  421 | async function checkNumberOfTodosInLocalStorage(page: Page, expected: number) {
  422 |   return await page.waitForFunction(e => {
  423 |     return JSON.parse(localStorage['react-todos']).length === e;
  424 |   }, expected);
  425 | }
  426 |
  427 | async function checkNumberOfCompletedTodosInLocalStorage(page: Page, expected: number) {
  428 |   return await page.waitForFunction(e => {
  429 |     return JSON.parse(localStorage['react-todos']).filter((todo: any) => todo.completed).length === e;
  430 |   }, expected);
  431 | }
  432 |
  433 | async function checkTodosInLocalStorage(page: Page, title: string) {
  434 |   return await page.waitForFunction(t => {
  435 |     return JSON.parse(localStorage['react-todos']).map((todo: any) => todo.title).includes(t);
  436 |   }, title);
  437 | }
  438 |
```