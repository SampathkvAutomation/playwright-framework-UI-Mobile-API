# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: test editpad @editpad
- Location: C:\Users\kvsam\playwright-framework-UI-Mobile-API\tests\ui\Editpadorg.spec.ts:4:5

# Error details

```
Error: page.goto: Test timeout of 30000ms exceeded.
Call log:
  - navigating to "https://www.editpad.org/", waiting until "load"

    at C:\Users\kvsam\playwright-framework-UI-Mobile-API\tests\ui\Editpadorg.spec.ts:6:16
```

# Page snapshot

```yaml
- link "Edit Pad - Free Online Text Editor Editpad":
  - img "Edit Pad - Free Online Text Editor"
  - text: Editpad
- link "+"
- img "search on editpad"
- link "Premium Button Icon Get Premium":
  - img "Premium Button Icon"
  - text: Get Premium
- link "Login"
- link "AI Detector"
- link "Humanize AI Text"
- link "Plagiarism Checker"
- link "Paraphrasing Tool"
- link "Story Generator"
- link "Text Summarizer"
- link "AI Essay Writer"
- button "Upload Icon Upload File":
  - img "Upload Icon"
  - text: Upload File
- button "Download Icon Download":
  - img "Download Icon"
  - text: Download
- img "Language Icon"
- text: Language
- img "Caret Icon"
- link "Our Blogs"
- img "Full Screen Icon"
- paragraph: Full Screen
- text: Give Feedback 0 words 0 Character 0 Sentence
- textbox "Untitled Document"
- text: Formatting
- checkbox
- button "New File Icon New Note":
  - img "New File Icon"
  - text: New Note
- img "Sidebar Open Icon"
- paragraph: SAVED NOTES
- paragraph: Saved Document List...
- textbox
```

# Test source

```ts
   1 | //https://www.editpad.org/
   2 | import {test , expect} from '@playwright/test';
   3 |
   4 | test('test editpad @editpad', async({page}) =>{
   5 |
>  6 |     await page.goto("https://www.editpad.org/");
     |                ^ Error: page.goto: Test timeout of 30000ms exceeded.
   7 |     await page.waitForLoadState("networkidle");
   8 |
   9 |     const texttopastLine1  = "Hello everyone. My is Sampath."
  10 |     const texttopasteline2 = "I am here for Interview for Automation Qa.";
  11 |
  12 |     await page.locator("//img[@alt='Close Icon']").first().click();
  13 |     await page.locator('//textarea[@id="textarea__editor"]').fill(texttopastLine1 +"\n"+ texttopasteline2);
  14 |     await page.locator('//span[@class="slider round"]').click();
  15 |
  16 |
  17 |     // await page.evaluate(() => {
  18 |     //     const textarea = document.getElementById("textarea__editor") as HTMLTextAreaElement;
  19 |     //     textarea.setSelectionRange(0, 28); // Select "Hello everyone. My name is Sampath."
  20 |     // });
  21 |
  22 |     const textarea = page.locator('//textarea[@id="textarea__editor"]');
  23 | await textarea.click();
  24 |
  25 | // Move cursor to the start
  26 | await page.keyboard.press("Control+End"); // Move to the end
  27 | await page.keyboard.press("ArrowLeft"); // Move cursor before the last character
  28 |
  29 | // Select "Automation Qa" using Shift + ArrowLeft
  30 | for (let i = 0; i < "Automation Qa".length; i++) {
  31 |     await page.keyboard.press("Shift+ArrowLeft");
  32 | }
  33 |     // await page.locator('//p[text()="Hello everyone. My is Sampath."]').dblclick({timeout:5000});
  34 |     // await page.locator('//p[contains(text(),"texttopastLine1")]').click();
  35 |     // await page.locator('//p[contains(text(),"texttopastLine1")]').click();
  36 |     // await page.locator('//span[@class="heading__face"]').click();
  37 |     await page.locator('//span[text()="H3"]').click();
  38 | })
  39 |
```